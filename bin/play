#!/usr/bin/env node
var _ = require('underscore');
var fs = require('fs');
var lib = require('../lib');
var strategies = require('../strategies');
var argv = require('yargs')
          .usage('Usage: $0 [options]')
          .alias('r', 'rounds')
          .describe('r', 'Number of rounds to play')
          .default('r', 5)
          .alias('a', 'appearances')
          .describe('a', 'Number of appearances per player throughout the tournament')
          .default('a', 5)
          .alias('n', 'duration')
          .describe('n', 'Sets both `rounds` and `appearances`')
          .alias('o', 'output')
          .describe('o', 'File to output detailed tournament results to, as JSON.')
          .alias('i', 'interactive')
          .describe('i', 'Adds a human player controlled by prompting the user over stdin.')
          .help('h')
          .alias('h', 'help')
          .argv;

if (!argv.interactive) delete strategies.human;
var players = _.values(strategies);

var tourney;
if (argv.interactive)
  tourney = new lib.Tournament(players, 1, 1);
else
  tourney = new lib.Tournament(players, argv.duration || argv.rounds, argv.duration || argv.appearances);
var result = tourney.play();

console.log('WINNERS');
var winners = _.pluck(result, 'winners');
console.log(winners);
if (winners.length > 1) {
  console.log('# WON');
  console.log(_.chain(winners).flatten().countBy().value()); 
}

if (argv.output) {
  var triplets = get_triplets_for_brain(result);
  fs.writeFileSync(argv.output, JSON.stringify(_.flatten(triplets), undefined, 2));
}

function get_triplets_for_brain (result) {
  function map_history (turn) {
    var players = _.pluck(turn.players, 'name');
    var environment = turn.environment;
    var relations = turn.relations;

    return turn.societies
    .filter(function (society) {
      return society.isAlive();
    })
    .map(function (society) {
      return {
        input: [environment.json(), society.json(), relations],
        output: turn.choices[society.index()]
      }
    });
  }

  return result.map(function (round) {
    return [
      map_history(round.history[0]),
      map_history(round.history.slice(-1)[0])
    ];
  });
}
